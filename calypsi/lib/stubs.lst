###############################################################################
#                                                                             #
# Calypsi ISO C compiler for 65816                                version 5.6 #
#                                                       31/Oct/2024  10:30:52 #
# Command line: -I. -I./include -DMODEL=17 -DCPU=255 --code-model large       #
#               --data-model large -l -o stubs.o stubs.c                      #
#                                                                             #
###############################################################################

    \ 000000                      .rtmodel version,"1"
    \ 000000                      .rtmodel codeModel,"large"
    \ 000000                      .rtmodel dataModel,"large"
    \ 000000                      .rtmodel core,"65816"
    \ 000000                      .rtmodel huge,"0"
    \ 000000                      .extern _Dp
    \ 000000                      .extern _Mul16
    \ 000000                      .extern _Vfp
    \ 000000                      .extern errno
    \ 000000                      .extern sys_chan_read
    \ 000000                      .extern sys_chan_write
    \ 000000                      .extern sys_fsys_close
    \ 000000                      .extern sys_fsys_delete
    \ 000000                      .extern sys_fsys_open
    \ 000000                      .extern sys_fsys_rename
0001                  /**
0002                   * @file stubs.c
0003                   * @brief Stubs for Calypsi I/O routines
0004                   * @version 0.1
0005                   * @date 2024-09-02
0006                   * 
0007                   * @copyright Copyright (c) 2024
0008                   * 
0009                   */
0010
0011                  #include "../lib/include/toolbox.h"
0012
0013                  #include <errno.h>
0014                  #include <fcntl.h>
0015                  #include <stdbool.h>
0016                  #include <stdint.h>
0017                  #include <stubs.h>
0018
0019                  #define MAX_FD 16
0020
0021                  struct s_file_descriptor {
0022                  	bool is_open;
0023                  	int public_fd;
0024                  	short toolbox_fd;
0025                  };
0026
0027                  static bool is_inited = false;
    \ 000000                      .section zfar,bss
    \ 000000          is_inited:  .space  2
0028                  static struct s_file_descriptor file_descriptor[MAX_FD];
    \ 000000                      .section zfar,bss
    \ 000000          file_descriptor:
    \ 000000                      .space  96
0029
0030                  static void init() {
    \ 000000                      .section farcode,text
    \ 000000 5a       init:       phy
0031                  	if (!is_inited) {
    \ 000001 af......             lda     long:is_inited
    \ 000005 f003                 beq     `?L114`
    \ 000007 4c....               jmp     .kbank `?L4`
    \ 00000a          `?L114`:
0032                  		is_inited = true;
    \ 00000a a90100               lda     ##1
    \ 00000d 8f......             sta     long:is_inited
0033
0034                  		// Define stdin
0035                  		file_descriptor[0].is_open = true;
    \ 000011 a90100               lda     ##1
    \ 000014 8f......             sta     long:file_descriptor
0036                  		file_descriptor[0].public_fd = 0;
    \ 000018 a90000               lda     ##0
    \ 00001b 8f......             sta     long:file_descriptor+2
0037                  		file_descriptor[0].toolbox_fd = 0;
    \ 00001f a90000               lda     ##0
    \ 000022 8f......             sta     long:file_descriptor+4
0038
0039                  		// Define stdout
0040                  		file_descriptor[1].is_open = true;
    \ 000026 a90100               lda     ##1
    \ 000029 8f......             sta     long:file_descriptor+6
0041                  		file_descriptor[1].public_fd = 1;
    \ 00002d a90100               lda     ##1
    \ 000030 8f......             sta     long:file_descriptor+8
0042                  		file_descriptor[1].toolbox_fd = 0;
    \ 000034 a90000               lda     ##0
    \ 000037 8f......             sta     long:file_descriptor+10
0043
0044                  		// Define stderr
0045                  		file_descriptor[2].is_open = true;
    \ 00003b a90100               lda     ##1
    \ 00003e 8f......             sta     long:file_descriptor+12
0046                  		file_descriptor[2].public_fd = 2;
    \ 000042 a90200               lda     ##2
    \ 000045 8f......             sta     long:file_descriptor+14
0047                  		file_descriptor[2].toolbox_fd = 0;
    \ 000049 a90000               lda     ##0
    \ 00004c 8f......             sta     long:file_descriptor+16
0048
0049                  		for (int i = 3; i < MAX_FD; i++) {
    \ 000050 a90300               lda     ##3
    \ 000053 8301                 sta     1,s
    \ 000055 a301                 lda     1,s
    \ 000057 8301                 sta     1,s
    \ 000059 a301     `?L8`:      lda     1,s
    \ 00005b 38                   sec
    \ 00005c e91000               sbc     ##16
    \ 00005f 5003                 bvc     `?L82`
    \ 000061 490080               eor     ##-32768
    \ 000064 105f     `?L82`:     bpl     `?L5`
0050                  			file_descriptor[i].is_open = false;
    \ 000066 a301                 lda     1,s
    \ 000068 a20600               ldx     ##6
    \ 00006b 22......             jsl     long:_Mul16
    \ 00006f aa                   tax
    \ 000070 a90000               lda     ##0
    \ 000073 9f......             sta     long:file_descriptor,x
0051                  			file_descriptor[i].public_fd = i;
    \ 000077 a2....               ldx     ##.word0 file_descriptor
    \ 00007a 86..                 stx     dp:.tiny _Dp
    \ 00007c a2....               ldx     ##.word2 file_descriptor
    \ 00007f 86..                 stx     dp:.tiny (_Dp+2)
    \ 000081 a301                 lda     1,s
    \ 000083 a20600               ldx     ##6
    \ 000086 22......             jsl     long:_Mul16
    \ 00008a 85..                 sta     dp:.tiny (_Dp+4)
    \ 00008c 18                   clc
    \ 00008d a5..                 lda     dp:.tiny _Dp
    \ 00008f 65..                 adc     dp:.tiny (_Dp+4)
    \ 000091 85..                 sta     dp:.tiny _Dp
    \ 000093 a301                 lda     1,s
    \ 000095 a00200               ldy     ##2
    \ 000098 97..                 sta     [.tiny _Dp],y
0052                  			file_descriptor[i].toolbox_fd = 0;
    \ 00009a a2....               ldx     ##.word0 file_descriptor
    \ 00009d 86..                 stx     dp:.tiny _Dp
    \ 00009f a2....               ldx     ##.word2 file_descriptor
    \ 0000a2 86..                 stx     dp:.tiny (_Dp+2)
    \ 0000a4 a301                 lda     1,s
    \ 0000a6 a20600               ldx     ##6
    \ 0000a9 22......             jsl     long:_Mul16
    \ 0000ad 85..                 sta     dp:.tiny (_Dp+4)
    \ 0000af 18                   clc
    \ 0000b0 a5..                 lda     dp:.tiny _Dp
    \ 0000b2 65..                 adc     dp:.tiny (_Dp+4)
    \ 0000b4 85..                 sta     dp:.tiny _Dp
    \ 0000b6 a90000               lda     ##0
    \ 0000b9 a00400               ldy     ##4
    \ 0000bc 97..                 sta     [.tiny _Dp],y
    \ 0000be a301                 lda     1,s
    \ 0000c0 1a                   inc     a
    \ 0000c1 8301                 sta     1,s
    \ 0000c3 8094                 bra     `?L8`
    \ 0000c5          `?L4`:
    \ 0000c5          `?L5`:
0053                  		}
0054                  	}
0055                  }
    \ 0000c5 7a                   ply
    \ 0000c6 6b                   rtl
0056
0057                  /**
0058                   * @brief Find a free file descriptor
0059                   * 
0060                   * @return int the index of the available (closed) file descriptor (-1 for error)
0061                   */
0062                  static int find_fd() {
    \ 000000                      .section farcode,text
    \ 000000 5a       find_fd:    phy
0063                  	for (int i = 3; i < MAX_FD; i++) {
    \ 000001 a90300               lda     ##3
    \ 000004 8301                 sta     1,s
    \ 000006 a301                 lda     1,s
    \ 000008 8301                 sta     1,s
    \ 00000a a301     `?L15`:     lda     1,s
    \ 00000c 38                   sec
    \ 00000d e91000               sbc     ##16
    \ 000010 5003                 bvc     `?L87`
    \ 000012 490080               eor     ##-32768
    \ 000015 3005     `?L87`:     bmi     `?L14`
0064                  		if (!file_descriptor[i].is_open) {
0065                  			// Found one that is closed... return it's public ID
0066                  			return file_descriptor[i].public_fd;
0067                  		}
0068                  	}
0069
0070                  	// Return an error
0071                  	return -1;
    \ 000017 a9ffff               lda     ##-1
    \ 00001a 8031                 bra     `?L13`
    \ 00001c a301     `?L14`:     lda     1,s
    \ 00001e a20600               ldx     ##6
    \ 000021 22......             jsl     long:_Mul16
    \ 000025 aa                   tax
    \ 000026 bf......             lda     long:file_descriptor,x
    \ 00002a d023                 bne     `?L18`
    \ 00002c a9....               lda     ##.word0 file_descriptor
    \ 00002f 85..                 sta     dp:.tiny _Dp
    \ 000031 a9....               lda     ##.word2 file_descriptor
    \ 000034 85..                 sta     dp:.tiny (_Dp+2)
    \ 000036 a301                 lda     1,s
    \ 000038 a20600               ldx     ##6
    \ 00003b 22......             jsl     long:_Mul16
    \ 00003f 85..                 sta     dp:.tiny (_Dp+4)
    \ 000041 18                   clc
    \ 000042 a5..                 lda     dp:.tiny _Dp
    \ 000044 65..                 adc     dp:.tiny (_Dp+4)
    \ 000046 85..                 sta     dp:.tiny _Dp
    \ 000048 a00200               ldy     ##2
    \ 00004b b7..                 lda     [.tiny _Dp],y
    \ 00004d          `?L13`:
0072                  }
    \ 00004d 7a                   ply
    \ 00004e 6b                   rtl
    \ 00004f a301     `?L18`:     lda     1,s
    \ 000051 1a                   inc     a
    \ 000052 8301                 sta     1,s
    \ 000054 80b4                 bra     `?L15`
0073
0074                  /****************************************************************************
0075                   * Name: _Stub_open
0076                   *
0077                   * Description:
0078                   *   Open a file.
0079                   *   The oflag argument are POSIX style mode flags, e.g O_RDONLY which
0080                   *   are defined in fcntl.h.
0081                   *   This function is variadic as it optionally can take a mode_t that
0082                   *   are permissions, e.g 0666. If the file system does not handle
0083                   *   permissions you can ignore that this function is variadic.
0084                   *   The return file descriptor shall be a positive number, larger
0085                   *   than 2 (as 0-2 are used for stdin, stdout and stderr).
0086                   *   The actual number does not matter and they need not to be
0087                   *   consequtive, multiple numeric series with gaps between can be used.
0088                   *
0089                   * Return the obtained file descriptor or EOF (-1) on failure and set
0090                   * errno according to the error.
0091                   *
0092                   ****************************************************************************/
0093
0094                  int _Stub_open(const char *path, int oflag, ...) {
    \ 000000                      .section farcode,text
    \ 000000                      .public _Stub_open
    \ 000000          _Stub_open:
    \ 000000 d4..                 pei     dp:.tiny (_Dp+8)
    \ 000002 d4..                 pei     dp:.tiny (_Dp+10)
    \ 000004 5a                   phy
    \ 000005 5a                   phy
    \ 000006 5a                   phy
    \ 000007 8303                 sta     3,s
    \ 000009 a5..                 lda     dp:.tiny _Dp
    \ 00000b 85..                 sta     dp:.tiny (_Dp+8)
    \ 00000d a5..                 lda     dp:.tiny (_Dp+2)
    \ 00000f 85..                 sta     dp:.tiny (_Dp+10)
0095                  	init();
    \ 000011 22......             jsl     long:init
0096                  	int fd = find_fd();
    \ 000015 22......             jsl     long:find_fd
    \ 000019 8305                 sta     5,s
0097                  	if (fd >= 0) {
    \ 00001b a305                 lda     5,s
    \ 00001d 1003                 bpl     `?L115`
    \ 00001f 4c....               jmp     .kbank `?L26`
    \ 000022          `?L115`:
0098                  		int mode = 0;
    \ 000022 a90000               lda     ##0
    \ 000025 8301                 sta     1,s
0099
0100                  		if ((oflag & O_RDONLY) == O_RDONLY) {
    \ 000027 a90100               lda     ##1
    \ 00002a 2303                 and     3,s
    \ 00002c c90100               cmp     ##1
    \ 00002f d00b                 bne     `?L29`
0101                  			mode = FSYS_READ | FSYS_OPEN_EXISTING;
    \ 000031 a90100               lda     ##1
    \ 000034 8301                 sta     1,s
    \ 000036 a301                 lda     1,s
    \ 000038 8301                 sta     1,s
    \ 00003a 8004                 bra     `?L30`
    \ 00003c a301     `?L29`:     lda     1,s
    \ 00003e 8301                 sta     1,s
    \ 000040          `?L30`:
0102                  		}
0103
0104                  		if ((oflag & O_WRONLY) == O_WRONLY) {
    \ 000040 a90200               lda     ##2
    \ 000043 2303                 and     3,s
    \ 000045 c90200               cmp     ##2
    \ 000048 d00b                 bne     `?L32`
0105                  			mode = FSYS_WRITE;
    \ 00004a a90200               lda     ##2
    \ 00004d 8301                 sta     1,s
    \ 00004f a301                 lda     1,s
    \ 000051 8301                 sta     1,s
    \ 000053 8004                 bra     `?L33`
    \ 000055 a301     `?L32`:     lda     1,s
    \ 000057 8301                 sta     1,s
    \ 000059          `?L33`:
0106                  		}
0107
0108                  		if ((oflag & O_RDWR) == O_RDWR) {
    \ 000059 a90300               lda     ##3
    \ 00005c 2303                 and     3,s
    \ 00005e c90300               cmp     ##3
    \ 000061 d00b                 bne     `?L35`
0109                  			mode = FSYS_READ | FSYS_WRITE;
    \ 000063 a90300               lda     ##3
    \ 000066 8301                 sta     1,s
    \ 000068 a301                 lda     1,s
    \ 00006a 8301                 sta     1,s
    \ 00006c 8004                 bra     `?L36`
    \ 00006e a301     `?L35`:     lda     1,s
    \ 000070 8301                 sta     1,s
    \ 000072          `?L36`:
0110                  		}
0111
0112                  		if ((oflag & O_CREAT) == O_CREAT) {
    \ 000072 a90400               lda     ##4
    \ 000075 2303                 and     3,s
    \ 000077 c90400               cmp     ##4
    \ 00007a d00d                 bne     `?L38`
0113                  			mode |= FSYS_CREATE_NEW | FSYS_CREATE_ALWAYS;
    \ 00007c a90c00               lda     ##12
    \ 00007f 0301                 ora     1,s
    \ 000081 8301                 sta     1,s
    \ 000083 a301                 lda     1,s
    \ 000085 8301                 sta     1,s
    \ 000087 8004                 bra     `?L39`
    \ 000089 a301     `?L38`:     lda     1,s
    \ 00008b 8301                 sta     1,s
    \ 00008d          `?L39`:
0114                  		}
0115
0116                  		short toolbox_fd = sys_fsys_open(path, mode);
    \ 00008d a301                 lda     1,s
    \ 00008f 48                   pha
    \ 000090 a6..                 ldx     dp:.tiny (_Dp+10)
    \ 000092 a5..                 lda     dp:.tiny (_Dp+8)
    \ 000094 22......             jsl     long:sys_fsys_open
    \ 000098 aa                   tax
    \ 000099 68                   pla
    \ 00009a 8a                   txa
    \ 00009b 8301                 sta     1,s
0117                  		if (toolbox_fd >= 0) {
    \ 00009d a301                 lda     1,s
    \ 00009f 3038                 bmi     `?L41`
0118                  			file_descriptor[fd].is_open = true;
    \ 0000a1 a305                 lda     5,s
    \ 0000a3 a20600               ldx     ##6
    \ 0000a6 22......             jsl     long:_Mul16
    \ 0000aa aa                   tax
    \ 0000ab a90100               lda     ##1
    \ 0000ae 9f......             sta     long:file_descriptor,x
0119                  			file_descriptor[fd].toolbox_fd = toolbox_fd;
    \ 0000b2 a2....               ldx     ##.word0 file_descriptor
    \ 0000b5 86..                 stx     dp:.tiny _Dp
    \ 0000b7 a2....               ldx     ##.word2 file_descriptor
    \ 0000ba 86..                 stx     dp:.tiny (_Dp+2)
    \ 0000bc a305                 lda     5,s
    \ 0000be a20600               ldx     ##6
    \ 0000c1 22......             jsl     long:_Mul16
    \ 0000c5 85..                 sta     dp:.tiny (_Dp+4)
    \ 0000c7 18                   clc
    \ 0000c8 a5..                 lda     dp:.tiny _Dp
    \ 0000ca 65..                 adc     dp:.tiny (_Dp+4)
    \ 0000cc 85..                 sta     dp:.tiny _Dp
    \ 0000ce a301                 lda     1,s
    \ 0000d0 a00400               ldy     ##4
    \ 0000d3 97..                 sta     [.tiny _Dp],y
0120
0121                  			return fd;
    \ 0000d5 a305                 lda     5,s
    \ 0000d7 800f                 bra     `?L25`
    \ 0000d9          `?L41`:
0122                  		} else {
0123                  			return -1;
    \ 0000d9 a9ffff               lda     ##-1
    \ 0000dc 800a                 bra     `?L25`
    \ 0000de          `?L26`:
0124                  		}
0125
0126                  	} else {
0127                  		errno = ENFILE;
    \ 0000de a91700               lda     ##23
    \ 0000e1 8f......             sta     long:errno
0128                  		return -1;
    \ 0000e5 a9ffff               lda     ##-1
    \ 0000e8          `?L25`:
0129                  	}
0130                  }
    \ 0000e8 7a                   ply
    \ 0000e9 7a                   ply
    \ 0000ea 7a                   ply
    \ 0000eb 7a                   ply
    \ 0000ec 84..                 sty     dp:.tiny (_Dp+10)
    \ 0000ee 7a                   ply
    \ 0000ef 84..                 sty     dp:.tiny (_Dp+8)
    \ 0000f1 6b                   rtl
0131
0132                  /****************************************************************************
0133                   * Name: _Stub_close
0134                   *
0135                   * Description:
0136                   *   Close a file
0137                   *
0138                   * Return 0 if operation was OK, EOF otherwise and set errno according to
0139                   * the error.
0140                   * Note: This will only be invoked for streams opened by _Stub_open(),
0141                   *       there is no need to check for the standard descriptor 0-2.
0142                   *
0143                   ****************************************************************************/
0144
0145                  int _Stub_close(int fd) {
    \ 000000                      .section farcode,text
    \ 000000                      .public _Stub_close
    \ 000000          _Stub_close:
    \ 000000 5a                   phy
    \ 000001 8301                 sta     1,s
0146                  	init();
    \ 000003 22......             jsl     long:init
0147                  	if (file_descriptor[fd].is_open) {
    \ 000007 a301                 lda     1,s
    \ 000009 a20600               ldx     ##6
    \ 00000c 22......             jsl     long:_Mul16
    \ 000010 aa                   tax
    \ 000011 bf......             lda     long:file_descriptor,x
    \ 000015 f05a                 beq     `?L50`
0148                  		sys_fsys_close(file_descriptor[fd].toolbox_fd);
    \ 000017 a9....               lda     ##.word0 file_descriptor
    \ 00001a 85..                 sta     dp:.tiny _Dp
    \ 00001c a9....               lda     ##.word2 file_descriptor
    \ 00001f 85..                 sta     dp:.tiny (_Dp+2)
    \ 000021 a301                 lda     1,s
    \ 000023 a20600               ldx     ##6
    \ 000026 22......             jsl     long:_Mul16
    \ 00002a 85..                 sta     dp:.tiny (_Dp+4)
    \ 00002c 18                   clc
    \ 00002d a5..                 lda     dp:.tiny _Dp
    \ 00002f 65..                 adc     dp:.tiny (_Dp+4)
    \ 000031 85..                 sta     dp:.tiny _Dp
    \ 000033 a00400               ldy     ##4
    \ 000036 b7..                 lda     [.tiny _Dp],y
    \ 000038 22......             jsl     long:sys_fsys_close
0149                  		file_descriptor[fd].toolbox_fd = 0;
    \ 00003c a2....               ldx     ##.word0 file_descriptor
    \ 00003f 86..                 stx     dp:.tiny _Dp
    \ 000041 a2....               ldx     ##.word2 file_descriptor
    \ 000044 86..                 stx     dp:.tiny (_Dp+2)
    \ 000046 a301                 lda     1,s
    \ 000048 a20600               ldx     ##6
    \ 00004b 22......             jsl     long:_Mul16
    \ 00004f 85..                 sta     dp:.tiny (_Dp+4)
    \ 000051 18                   clc
    \ 000052 a5..                 lda     dp:.tiny _Dp
    \ 000054 65..                 adc     dp:.tiny (_Dp+4)
    \ 000056 85..                 sta     dp:.tiny _Dp
    \ 000058 a90000               lda     ##0
    \ 00005b a00400               ldy     ##4
    \ 00005e 97..                 sta     [.tiny _Dp],y
0150                  		file_descriptor[fd].is_open = false;
    \ 000060 a301                 lda     1,s
    \ 000062 a20600               ldx     ##6
    \ 000065 22......             jsl     long:_Mul16
    \ 000069 aa                   tax
    \ 00006a a90000               lda     ##0
    \ 00006d 9f......             sta     long:file_descriptor,x
    \ 000071          `?L50`:
    \ 000071          `?L51`:
0151                  	}
0152                  	
0153                  	return 0;
    \ 000071 a90000               lda     ##0
0154                  }
    \ 000074 7a                   ply
    \ 000075 6b                   rtl
0155
0156                  /****************************************************************************
0157                  * Name: _Stub_lseek
0158                  *
0159                  * Description:
0160                  * Change position in a file
0161                  *
0162                  * Returns the new position in the file in bytes from the beginning of the
0163                  * file, or -1 on failure.
0164                  *
0165                  ****************************************************************************/
0166
0167                  long _Stub_lseek(int fd, long offset, int whence) {
    \ 000000                      .section farcode,text
    \ 000000                      .public _Stub_lseek
    \ 000000          _Stub_lseek:
0168                  	init();
    \ 000000 22......             jsl     long:init
0169                  	return 0;
    \ 000004 a90000               lda     ##0
    \ 000007 a20000               ldx     ##0
0170                  }
    \ 00000a 6b                   rtl
0171
0172                  /****************************************************************************
0173                   * Name: _Stub_read
0174                   *
0175                   * Description:
0176                   *   Read from a file
0177                   *
0178                   * Returns the number of characters read. Return -1 on failure and set
0179                   * errno according to the error.
0180                   *
0181                   ****************************************************************************/
0182
0183                  size_t _Stub_read(int fd, void *buf, size_t count) {
    \ 000000                      .section farcode,text
    \ 000000                      .public _Stub_read
    \ 000000          _Stub_read:
    \ 000000 d4..                 pei     dp:.tiny (_Dp+8)
    \ 000002 d4..                 pei     dp:.tiny (_Dp+10)
    \ 000004 d4..                 pei     dp:.tiny (_Dp+12)
    \ 000006 d4..                 pei     dp:.tiny (_Dp+14)
    \ 000008 5a                   phy
    \ 000009 8301                 sta     1,s
    \ 00000b a5..                 lda     dp:.tiny _Dp
    \ 00000d 85..                 sta     dp:.tiny (_Dp+12)
    \ 00000f a5..                 lda     dp:.tiny (_Dp+2)
    \ 000011 85..                 sta     dp:.tiny (_Dp+14)
    \ 000013 a5..                 lda     dp:.tiny (_Dp+4)
    \ 000015 85..                 sta     dp:.tiny (_Dp+8)
0184                  	init();
    \ 000017 22......             jsl     long:init
0185                  	if (file_descriptor[fd].is_open) {
    \ 00001b a301                 lda     1,s
    \ 00001d a20600               ldx     ##6
    \ 000020 22......             jsl     long:_Mul16
    \ 000024 aa                   tax
    \ 000025 bf......             lda     long:file_descriptor,x
    \ 000029 f035                 beq     `?L61`
0186                  		short n = sys_chan_read(file_descriptor[fd].toolbox_fd, (unsigned char *)buf, (short)count);
    \ 00002b a5..                 lda     dp:.tiny (_Dp+8)
    \ 00002d 48                   pha
    \ 00002e a5..                 lda     dp:.tiny (_Dp+14)
    \ 000030 48                   pha
    \ 000031 a5..                 lda     dp:.tiny (_Dp+12)
    \ 000033 48                   pha
    \ 000034 a9....               lda     ##.word0 file_descriptor
    \ 000037 85..                 sta     dp:.tiny _Dp
    \ 000039 a9....               lda     ##.word2 file_descriptor
    \ 00003c 85..                 sta     dp:.tiny (_Dp+2)
    \ 00003e a307                 lda     7,s
    \ 000040 a20600               ldx     ##6
    \ 000043 22......             jsl     long:_Mul16
    \ 000047 85..                 sta     dp:.tiny (_Dp+4)
    \ 000049 18                   clc
    \ 00004a a5..                 lda     dp:.tiny _Dp
    \ 00004c 65..                 adc     dp:.tiny (_Dp+4)
    \ 00004e 85..                 sta     dp:.tiny _Dp
    \ 000050 a00400               ldy     ##4
    \ 000053 b7..                 lda     [.tiny _Dp],y
    \ 000055 22......             jsl     long:sys_chan_read
    \ 000059 aa                   tax
    \ 00005a 68                   pla
    \ 00005b 68                   pla
    \ 00005c 68                   pla
0187                  		return n;
    \ 00005d 8a                   txa
    \ 00005e 8003                 bra     `?L60`
    \ 000060          `?L61`:
0188                  	} else {
0189                  		return -1;
    \ 000060 a9ffff               lda     ##-1
    \ 000063          `?L60`:
0190                  	}
0191                  }
    \ 000063 7a                   ply
    \ 000064 7a                   ply
    \ 000065 84..                 sty     dp:.tiny (_Dp+14)
    \ 000067 7a                   ply
    \ 000068 84..                 sty     dp:.tiny (_Dp+12)
    \ 00006a 7a                   ply
    \ 00006b 84..                 sty     dp:.tiny (_Dp+10)
    \ 00006d 7a                   ply
    \ 00006e 84..                 sty     dp:.tiny (_Dp+8)
    \ 000070 6b                   rtl
0192
0193                  /****************************************************************************
0194                   * Name: _Stub_write
0195                   *
0196                   * Description:
0197                   *   Write to a file
0198                   *
0199                   * Returns the number of characters actually written. Return -1 on failure and
0200                   * set errno according to the error.
0201                   *
0202                   ****************************************************************************/
0203
0204                  size_t _Stub_write(int fd, const void *buf, size_t count) {
    \ 000000                      .section farcode,text
    \ 000000                      .public _Stub_write
    \ 000000          _Stub_write:
    \ 000000 d4..                 pei     dp:.tiny (_Dp+8)
    \ 000002 d4..                 pei     dp:.tiny (_Dp+10)
    \ 000004 d4..                 pei     dp:.tiny (_Dp+12)
    \ 000006 d4..                 pei     dp:.tiny (_Dp+14)
    \ 000008 5a                   phy
    \ 000009 8301                 sta     1,s
    \ 00000b a5..                 lda     dp:.tiny _Dp
    \ 00000d 85..                 sta     dp:.tiny (_Dp+12)
    \ 00000f a5..                 lda     dp:.tiny (_Dp+2)
    \ 000011 85..                 sta     dp:.tiny (_Dp+14)
    \ 000013 a5..                 lda     dp:.tiny (_Dp+4)
    \ 000015 85..                 sta     dp:.tiny (_Dp+8)
0205                  	init();
    \ 000017 22......             jsl     long:init
0206                  	if (file_descriptor[fd].is_open) {
    \ 00001b a301                 lda     1,s
    \ 00001d a20600               ldx     ##6
    \ 000020 22......             jsl     long:_Mul16
    \ 000024 aa                   tax
    \ 000025 bf......             lda     long:file_descriptor,x
    \ 000029 f017                 beq     `?L69`
0207                  		short n = sys_chan_write(/* file_descriptor[fd].toolbox_fd */ 0, (unsigned char *)buf, (short)count);
    \ 00002b a5..                 lda     dp:.tiny (_Dp+8)
    \ 00002d 48                   pha
    \ 00002e a5..                 lda     dp:.tiny (_Dp+14)
    \ 000030 48                   pha
    \ 000031 a5..                 lda     dp:.tiny (_Dp+12)
    \ 000033 48                   pha
    \ 000034 a90000               lda     ##0
    \ 000037 22......             jsl     long:sys_chan_write
    \ 00003b aa                   tax
    \ 00003c 68                   pla
    \ 00003d 68                   pla
    \ 00003e 68                   pla
0208                  		return n;
    \ 00003f 8a                   txa
    \ 000040 8003                 bra     `?L68`
    \ 000042          `?L69`:
0209                  	} else {
0210                  		return -1;
    \ 000042 a9ffff               lda     ##-1
    \ 000045          `?L68`:
0211                  	}
0212                  }
    \ 000045 7a                   ply
    \ 000046 7a                   ply
    \ 000047 84..                 sty     dp:.tiny (_Dp+14)
    \ 000049 7a                   ply
    \ 00004a 84..                 sty     dp:.tiny (_Dp+12)
    \ 00004c 7a                   ply
    \ 00004d 84..                 sty     dp:.tiny (_Dp+10)
    \ 00004f 7a                   ply
    \ 000050 84..                 sty     dp:.tiny (_Dp+8)
    \ 000052 6b                   rtl
0213
0214                  /****************************************************************************
0215                   * Name: _Stub_rename
0216                   *
0217                   * Description:
0218                   *   Rename a file or directory
0219                   *
0220                   * Return 0 on success, -1 otherwise and set errno according to the
0221                   * error.
0222                   *
0223                   ****************************************************************************/
0224
0225                  int _Stub_rename(const char *oldpath, const char *newpath) {
    \ 000000                      .section farcode,text
    \ 000000                      .public _Stub_rename
    \ 000000          _Stub_rename:
    \ 000000 d4..                 pei     dp:.tiny (_Dp+8)
    \ 000002 d4..                 pei     dp:.tiny (_Dp+10)
    \ 000004 d4..                 pei     dp:.tiny (_Dp+12)
    \ 000006 d4..                 pei     dp:.tiny (_Dp+14)
    \ 000008 a5..                 lda     dp:.tiny _Dp
    \ 00000a 85..                 sta     dp:.tiny (_Dp+12)
    \ 00000c a5..                 lda     dp:.tiny (_Dp+2)
    \ 00000e 85..                 sta     dp:.tiny (_Dp+14)
    \ 000010 a5..                 lda     dp:.tiny (_Dp+4)
    \ 000012 85..                 sta     dp:.tiny (_Dp+8)
    \ 000014 a5..                 lda     dp:.tiny (_Dp+6)
    \ 000016 85..                 sta     dp:.tiny (_Dp+10)
0226                  	init();
    \ 000018 22......             jsl     long:init
0227                  	short result = sys_fsys_rename(oldpath, newpath);
    \ 00001c a5..                 lda     dp:.tiny (_Dp+10)
    \ 00001e 48                   pha
    \ 00001f a5..                 lda     dp:.tiny (_Dp+8)
    \ 000021 48                   pha
    \ 000022 a6..                 ldx     dp:.tiny (_Dp+14)
    \ 000024 a5..                 lda     dp:.tiny (_Dp+12)
    \ 000026 22......             jsl     long:sys_fsys_rename
    \ 00002a aa                   tax
    \ 00002b 68                   pla
    \ 00002c 68                   pla
0228                  	return result;
    \ 00002d 8a                   txa
0229                  }
    \ 00002e 7a                   ply
    \ 00002f 84..                 sty     dp:.tiny (_Dp+14)
    \ 000031 7a                   ply
    \ 000032 84..                 sty     dp:.tiny (_Dp+12)
    \ 000034 7a                   ply
    \ 000035 84..                 sty     dp:.tiny (_Dp+10)
    \ 000037 7a                   ply
    \ 000038 84..                 sty     dp:.tiny (_Dp+8)
    \ 00003a 6b                   rtl
0230
0231                  /****************************************************************************
0232                   * Name: _Stub_remove
0233                   *
0234                   * Description:
0235                   *   Remove a file or directory
0236                   *
0237                   * Return 0 on success, -1 otherwise and set errno according to the
0238                   * error.
0239                   *
0240                   ****************************************************************************/
0241
0242                  int _Stub_remove(const char *path) {
    \ 000000                      .section farcode,text
    \ 000000                      .public _Stub_remove
    \ 000000          _Stub_remove:
    \ 000000 d4..                 pei     dp:.tiny (_Dp+8)
    \ 000002 d4..                 pei     dp:.tiny (_Dp+10)
    \ 000004 a5..                 lda     dp:.tiny _Dp
    \ 000006 85..                 sta     dp:.tiny (_Dp+8)
    \ 000008 a5..                 lda     dp:.tiny (_Dp+2)
    \ 00000a 85..                 sta     dp:.tiny (_Dp+10)
0243                  	init();
    \ 00000c 22......             jsl     long:init
0244                  	short result = sys_fsys_delete(path);
    \ 000010 a6..                 ldx     dp:.tiny (_Dp+10)
    \ 000012 a5..                 lda     dp:.tiny (_Dp+8)
    \ 000014 22......             jsl     long:sys_fsys_delete
0245                  	return result;
0246                  }
    \ 000018 7a                   ply
    \ 000019 84..                 sty     dp:.tiny (_Dp+10)
    \ 00001b 7a                   ply
    \ 00001c 84..                 sty     dp:.tiny (_Dp+8)
    \ 00001e 6b                   rtl

##########################
#                        #
# Memory sizes (decimal) #
#                        #
##########################

Executable              (Text): 942 bytes
Zero initialized __far   (BSS):  98 bytes
